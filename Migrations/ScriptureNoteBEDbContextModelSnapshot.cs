// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScriptureNotesBE.Data;

#nullable disable

namespace ScriptureNotesBE.Migrations
{
    [DbContext(typeof(ScriptureNoteBEDbContext))]
    partial class ScriptureNoteBEDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ScriptureNotesBE.Models.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Joined_At")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 602, DateTimeKind.Utc).AddTicks(2618),
                            GroupId = 11,
                            Joined_At = new DateTime(2025, 5, 31, 7, 36, 44, 602, DateTimeKind.Utc).AddTicks(2936),
                            Uid = "one",
                            UserId = 1111
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 602, DateTimeKind.Utc).AddTicks(3214),
                            GroupId = 12,
                            Joined_At = new DateTime(2025, 5, 31, 7, 36, 44, 602, DateTimeKind.Utc).AddTicks(3215),
                            Uid = "two",
                            UserId = 2222
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 602, DateTimeKind.Utc).AddTicks(3216),
                            GroupId = 13,
                            Joined_At = new DateTime(2025, 5, 31, 7, 36, 44, 602, DateTimeKind.Utc).AddTicks(3216),
                            Uid = "two",
                            UserId = 1111
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 602, DateTimeKind.Utc).AddTicks(3218),
                            GroupId = 14,
                            Joined_At = new DateTime(2025, 5, 31, 7, 36, 44, 602, DateTimeKind.Utc).AddTicks(3218),
                            Uid = "one",
                            UserId = 2222
                        });
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = 111,
                            Content = "This is the first note.",
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 601, DateTimeKind.Utc).AddTicks(5176),
                            Title = "Note 1",
                            Uid = "one",
                            UserId = 1111
                        },
                        new
                        {
                            Id = 222,
                            Content = "This is the second note.",
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 601, DateTimeKind.Utc).AddTicks(5524),
                            Title = "Note 2",
                            Uid = "two",
                            UserId = 2222
                        },
                        new
                        {
                            Id = 333,
                            Content = "This is the third note.",
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 601, DateTimeKind.Utc).AddTicks(5526),
                            Title = "Note 3",
                            Uid = "one",
                            UserId = 1111
                        });
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.NoteScripture", b =>
                {
                    b.Property<int>("NoteId")
                        .HasColumnType("integer");

                    b.Property<int>("ScriptureId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("NoteId", "ScriptureId");

                    b.HasIndex("ScriptureId");

                    b.ToTable("NoteScriptures");

                    b.HasData(
                        new
                        {
                            NoteId = 111,
                            ScriptureId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 1
                        },
                        new
                        {
                            NoteId = 222,
                            ScriptureId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 2
                        },
                        new
                        {
                            NoteId = 333,
                            ScriptureId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 3
                        });
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.NoteTag", b =>
                {
                    b.Property<int>("NoteId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("NoteId", "TagId");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("NoteTags");

                    b.HasData(
                        new
                        {
                            NoteId = 111,
                            TagId = 100,
                            Id = 101
                        },
                        new
                        {
                            NoteId = 111,
                            TagId = 200,
                            Id = 202
                        },
                        new
                        {
                            NoteId = 222,
                            TagId = 300,
                            Id = 303
                        },
                        new
                        {
                            NoteId = 222,
                            TagId = 400,
                            Id = 404
                        },
                        new
                        {
                            NoteId = 333,
                            TagId = 500,
                            Id = 505
                        });
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.Scripture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ref")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Scriptures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ref = "3 John 1",
                            Text = "The elder to the beloved Gaius, whom I love in truth."
                        },
                        new
                        {
                            Id = 2,
                            Ref = "3 John 2",
                            Text = "Beloved, I pray that all may go well with you and that you may be in good health, as it goes well with your soul."
                        },
                        new
                        {
                            Id = 3,
                            Ref = "3 John 3",
                            Text = "For I rejoiced greatly when the brothers came and testified to your truth, as indeed you are walking in the truth."
                        },
                        new
                        {
                            Id = 4,
                            Ref = "3 John 4",
                            Text = "I have no greater joy than to hear that my children are walking in the truth."
                        },
                        new
                        {
                            Id = 5,
                            Ref = "3 John 5",
                            Text = "Beloved, it is a faithful thing you do in all your efforts for these brothers, strangers as they are, "
                        },
                        new
                        {
                            Id = 6,
                            Ref = "3 John 6",
                            Text = "who testified to your love before the church. You will do well to send them on their journey in a manner worthy of God."
                        },
                        new
                        {
                            Id = 7,
                            Ref = "3 John 7",
                            Text = "For they have gone out for the sake of the name, accepting nothing from the Gentiles."
                        },
                        new
                        {
                            Id = 8,
                            Ref = "3 John 8",
                            Text = "Therefore we ought to support people like these, that we may be fellow workers for the truth."
                        },
                        new
                        {
                            Id = 9,
                            Ref = "3 John 9",
                            Text = "I have written something to the church, but Diotrephes, who likes to put himself first, does not acknowledge our authority. "
                        },
                        new
                        {
                            Id = 10,
                            Ref = "3 John 10",
                            Text = "So if I come, I will bring up what he is doing, talking wicked nonsense against us. And not content with that, he refuses to welcome the brothers, and also stops those who want to and puts them out of the church."
                        },
                        new
                        {
                            Id = 11,
                            Ref = "3 John 11",
                            Text = "Beloved, do not imitate evil but imitate good. Whoever does good is from God; whoever does evil has not seen God."
                        },
                        new
                        {
                            Id = 12,
                            Ref = "3 John 12",
                            Text = "Demetrius has received a good testimony from everyone, and from the truth itself. We also add our testimony, and you know that our testimony is true."
                        },
                        new
                        {
                            Id = 13,
                            Ref = "3 John 13",
                            Text = "I had much to write to you, but I would rather not write with pen and ink."
                        },
                        new
                        {
                            Id = 14,
                            Ref = "3 John 14",
                            Text = "I hope to see you soon, and we will talk face to face."
                        },
                        new
                        {
                            Id = 15,
                            Ref = "3 John 15",
                            Text = "Peace be to you. The friends greet you. Greet the friends, each by name."
                        });
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.StudyGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StudyGroups");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 601, DateTimeKind.Utc).AddTicks(8912),
                            Description = "This is group 1",
                            Name = "Group 1"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 601, DateTimeKind.Utc).AddTicks(9230),
                            Description = "This is group 2",
                            Name = "Group 2"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 601, DateTimeKind.Utc).AddTicks(9231),
                            Description = "This is group 3",
                            Name = "Group 3"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 601, DateTimeKind.Utc).AddTicks(9232),
                            Description = "This is group 4",
                            Name = "Group 4"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 601, DateTimeKind.Utc).AddTicks(9233),
                            Description = "This is group 5",
                            Name = "Group 5"
                        });
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 602, DateTimeKind.Utc).AddTicks(6015),
                            Name = "Faith"
                        },
                        new
                        {
                            Id = 200,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 602, DateTimeKind.Utc).AddTicks(6269),
                            Name = "Doctrine"
                        },
                        new
                        {
                            Id = 300,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 602, DateTimeKind.Utc).AddTicks(6270),
                            Name = "Love"
                        },
                        new
                        {
                            Id = 400,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 602, DateTimeKind.Utc).AddTicks(6271),
                            Name = "Repentence"
                        },
                        new
                        {
                            Id = 500,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 602, DateTimeKind.Utc).AddTicks(6272),
                            Name = "Peace"
                        });
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1111,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 601, DateTimeKind.Utc).AddTicks(1622),
                            Email = "user1@gmail.com",
                            Uid = "one",
                            UserName = "user1"
                        },
                        new
                        {
                            Id = 2222,
                            CreatedAt = new DateTime(2025, 5, 31, 7, 36, 44, 601, DateTimeKind.Utc).AddTicks(1901),
                            Email = "user2@gmail.com",
                            Uid = "two",
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.GroupMember", b =>
                {
                    b.HasOne("ScriptureNotesBE.Models.StudyGroup", "StudyGroup")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScriptureNotesBE.Models.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudyGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.Note", b =>
                {
                    b.HasOne("ScriptureNotesBE.Models.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.NoteScripture", b =>
                {
                    b.HasOne("ScriptureNotesBE.Models.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScriptureNotesBE.Models.Scripture", "Scripture")
                        .WithMany("NoteScriptures")
                        .HasForeignKey("ScriptureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Scripture");
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.NoteTag", b =>
                {
                    b.HasOne("ScriptureNotesBE.Models.Note", "Note")
                        .WithMany("NoteTags")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScriptureNotesBE.Models.Tag", "Tag")
                        .WithMany("NoteTag")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScriptureNotesBE.Models.User", null)
                        .WithMany("NoteTags")
                        .HasForeignKey("UserId");

                    b.Navigation("Note");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.Note", b =>
                {
                    b.Navigation("NoteTags");
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.Scripture", b =>
                {
                    b.Navigation("NoteScriptures");
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.StudyGroup", b =>
                {
                    b.Navigation("GroupMembers");
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.Tag", b =>
                {
                    b.Navigation("NoteTag");
                });

            modelBuilder.Entity("ScriptureNotesBE.Models.User", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("NoteTags");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
